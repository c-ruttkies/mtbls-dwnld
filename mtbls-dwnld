#!/bin/bash
# vi: fdm=marker

# Constants {{{1
# ==============

PROG_NAME=$(basename $0)
YES=yes

# Global variables {{{1
# =====================

DEBUG=0
ASPERA=
TOKEN=
OUTPUT=
HTML=

# Print help {{{1
# ===============

function print_help {
	echo "Usage: $PROG_NAME [options] study"
	echo
	echo "Retrieves a study from Metabolights database."
	echo "By default it uses the ftp server, but with -a option you can ask for using aspera server (you will need the aspera client ascp to be installed)."
	echo
	echo "Options:"
	echo "   -a, --aspera           Use aspera server for downloading. You need the ascp client to be installed, it is freely available for linux 64. See http://downloads.asperasoft.com."
	echo "   -g, --debug            Debug mode."
	echo "   -h, --help             Print this help message."
	echo "	 -H, --html		Write HTML file that list files contained in output directory."
	echo "   -o, --output value     Set the output directory to use."
	echo "   -t, --token value      Set the token or password to use."
}

# Error {{{1
# ==========

function error {

	local msg=$1

	echo "ERROR: $msg" >&2

	exit 1
}

# Print debug msg {{{1
# ====================

function print_debug_msg {

	local dbglvl=$1
	local dbgmsg=$2

	[ $DEBUG -ge $dbglvl ] && echo "[DEBUG] $dbgmsg" >&2
}

# Get opt val {{{1
# ================

function get_opt_val {
	[ -n "$2" ] || error "\"$1\" requires a non-empty option argument."
	echo $2
}

# Read args {{{1
# ==============

function read_args {

	local args="$*" # save arguments for debugging purpose
	
	# Read options
	while true ; do
		shift_count=1
		case $1 in
			-a|--aspera)        ASPERA=$YES ;;
			-g|--debug)         DEBUG=$((DEBUG + 1)) ;;
			-h|--help)          print_help ; exit 0 ;;
			-H|--html)          HTML=$(get_opt_val $1 $2) ; shift_count=2 ;;
			-o|--output)        OUTPUT=$(get_opt_val $1 $2) ; shift_count=2 ;;
			-t|--token)         TOKEN=$(get_opt_val $1 $2) ; shift_count=2 ;;
			-) error "Illegal option $1." ;;
			--) error "Illegal option $1." ;;
			--*) error "Illegal option $1." ;;
			-?) error "Unknown option $1." ;;
			-[^-]*) split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift $shift_count
	done
	shift $((OPTIND - 1))

	# Read remaining arguments
	[ $# -eq 1 ] || error "You must specify one, and only one, study to retrieve."
	STUDY="$1"

	# Debug
	print_debug_msg 1 "Arguments are : $args"
	print_debug_msg 1 "Study to retrieve is : $STUDY"
	[ -n "$ASPERA" ] && print_debug_msg 1 "Aspera will be used."
	[ -n "$TOKEN" ] && print_debug_msg 1 "Token/Password is \"$TOKEN\"."
}

# MAIN {{{1
# =========

read_args "$@"

tmp_output=$(basename $STUDY)

# Set download command
if [ -n "$ASPERA" ] ; then

	export ASPERA_SCP_PASS="$TOKEN"

	dwnld_cmd="ascp -QT -l 1g fasp-ml@fasp.ebi.ac.uk:$STUDY ."
else
	tmp_output+=.zip
	dwnld_cmd="wget -O $tmp_output http://www.ebi.ac.uk/metabolights/$(basename $STUDY)/files/$(basename $STUDY)"
	if [ -n "$TOKEN" ] ; then
		dwnld_cmd+="?token=$TOKEN"
	fi
fi

# Run download command
print_debug_msg 1 "Download command: $dwnld_cmd"
$dwnld_cmd 2>&1
if [ -f $tmp_output -a ! -s $tmp_output ] ; then
	echo "Cannot download $tmp_output file. Command \"$dwnld_cmd\" has failed." >&2
	exit 1
fi

# Zip file?
if [ ${tmp_output##*.} = 'zip' ] ; then
	[ -n "$(which unzip)" ] || error "unzip command not found. Please install zip package."

	zip=$tmp_output
	tmp_output=${zip%.*}
	curdir=$(pwd)
	mkdir $tmp_output
	cd $tmp_output
	unzip "$curdir/$zip"
	cd -
fi

# Write HTML
if [ -n "$HTML" ] ; then
	cat >$HTML <<EOF
<html>
	<header>
		<title>Metabolights study</title>
	</header>
	<body>
		<a href="i_Investigation.txt">Investigation file</a><br/>
EOF

	echo "		Study files:<br/>" >>$HTML
	for f in $tmp_output/s_*.txt ; do
		filename=$(basename "$f")
		echo "		<a href=\"$filename\">$f</a><br/>" >>$HTML
	done

	echo "		Assay files:<br/>" >>$HTML
	for f in $tmp_output/a_*.txt ; do
		filename=$(basename "$f")
		echo "		<a href=\"$filename\">$f</a><br/>" >>$HTML
	done

	cat >>$HTML <<EOF
	</body>
</html>
EOF
fi

# Move output directory
if [ -n "$OUTPUT" ] ; then
	mv $tmp_output $OUTPUT
fi
