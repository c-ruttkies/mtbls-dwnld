#!/usr/bin/env Rscript
# vi: ft=R fdm=marker

library(getopt)
library(Risa)

# Constants {{{1
################################################################

ARGS <- commandArgs(trailingOnly = F)
SCRIPT.PATH <- sub("--file=", "", ARGS[grep("--file=", ARGS)])
PROG.NAME <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)

# Print help {{{1
################################################################

print.help <- function(spec) {
	cat(getopt(spec, usage = TRUE, command = PROG.NAME))
	q(status = 0)
}

# Arg error {{{1
################################################################

arg.error <- function(msg) {
	stop(paste(msg, "Use -h option to get help."))
}

# Read args {{{1
################################################################

read.args <- function() {

	# options
	spec <- c(
		'help',             'h',            0,  'logical',      'Print this help.',
		'input',            'i',            1,  'character',    'Input directory containing the ISA-Tab files.',
		'sample-output',    's',            1,  'character',    'Output file for sample metadata.',
		'variable-output',  'v',            1,  'character',    'Output file for variable metadata.',
		'matrix-output',    'm',            1,  'character',    'Output file for sample x variable matrix.'
		)
	opt <- getopt(matrix(spec, byrow = TRUE, ncol = 5))

	# Help
	is.null(opt$help) || print.help(spec)

	# Check values
	! is.null(opt$input) || arg.error('You must set an input directory through -i option.')
	file.exists(opt$input) || arg.error(paste("Directory \"", opt$input, "\" doesn't exist.", sep = ''))

	# Set default path for unset outputs
	if (is.null(opt[['sample-output']])) opt[['sample-output']] <- paste(opt$input, 'sample-metadata.tsv', sep = '-')
	if (is.null(opt[['variable-output']])) opt[['variable-output']] <- paste(opt$input, 'variable-metadata.tsv', sep = '-')
	if (is.null(opt[['matrix-output']])) opt[['matrix-output']] <- paste(opt$input, 'sample-variable-matrix.tsv', sep = '-')

	return(opt)
}

# MAIN {{{1
################################################################

options(error = function() { traceback(2) ; quit(status = 1) }, warn = 2 )

# Read command line arguments
opt <- read.args()

# Read ISA-Tab files
isa <- readISAtab(opt$input)
#print(cbind(measurement = isa@assay.measurement.types, technology = isa@assay.technology.types, names = isa@assay.filenames))
#print(getMSAssayFilenames(isa))
#print(Risa:::isatab.syntax)

# Get w4m format
sample.metadata <- NULL
variable.metadata <- NULL
sample.variable.matrix <- NULL

# Get first study
study.name <- isa@study.identifiers[[1]]
length(study.name) == 1 || stop("No study found.")

# Get study data frame
study.df <- isa@study.files[[study.name]]

# Get first assay of study
study.assays <- isa@assay.files.per.study[[study.name]]
length(study.assays) > 0 || stop(paste("No assay in study ", study.name, ".", sep = ''))
study.assay.df <- study.assays[[1]]

# Create sample metadata by merging assay and study metadata
sample.metadata <- merge(study.assay.df, study.assay.df, by = "Sample Name", sort = FALSE)

# Get sample names
sample.names <- study.assay.df[['Sample Name']]

# Make fake data
#sample.metadata <- data.frame( samplename = c('A', 'B', 'C'), someinfo = c(1, 2, 3))
variable.metadata <- data.frame( variablename = c('x', 'y'), varinfo = c(45,12))
sample.variable.matrix <- data.frame( x = c(4.3, 2.1, 5.6), y = c(-0.1, -5, 4))

# Write output
write.table(sample.metadata, file = opt[['sample-output']], sep = "\t")
write.table(variable.metadata, file = opt[['variable-output']], sep = "\t")
write.table(sample.variable.matrix, file = opt[['matrix-output']], sep = "\t")
